#!/usr/bin/env python

import sys, cmd
from subprocess import Popen, PIPE

#--help-command-list [file]  = List available listfile commands and exit.
#--help-module-list [file]   = List available modules and exit.
#--help-property-list [file] = List available properties and exit.
#--help-variable-list [file] = List documented variables and exit.
class CMakeHelp(cmd.Cmd):
    def __init__(self):
        cmd.Cmd.__init__(self)
        self.prompt = "[CMake Help] "
        self.keywords = {}
        self.intro = """
Welcome to the interactive CMake Help system

To view the documentation for a specific CMake element
use on of the following commands:

    command   -  Print help for a single command'
    module    -  Print help for a single module
    property  -  Print help for a single property
    variable  -  Print help for a single variable

To get a list of available elments use the Tab completetion:

    [CMake Help] command fi<TAB>

        """

    def display_cmake_help(self, _type, keyword):
        Popen('cmake --help-%s %s | less' % (_type, keyword), shell=True).communicate()

    def get_cmake_keywords(self, _type):
        """ Gets a list of available keywords for the given CMake type and cachces them """
        if not _type in self.keywords:
            self.keywords[_type]= Popen('cmake --help-%s-list' % _type, shell=True, stdout=PIPE).communicate()[0].splitlines()
        return self.keywords[_type]

    def get_cmake_completions(self, _type, text):
        completions = keywords = self.get_cmake_keywords(_type)
        if not text:
            completions = keywords
        else:
            completions = [ keyword
                            for keyword in keywords
                            if keyword.startswith(text)
                          ]
        return completions

    def do_command(self, arg):
        """docstring for do_test"""
        self.display_cmake_help('command', arg)

    def help_command(self):
        """docstring for help_test"""
        print
        print 'Print help for a single command'
        print

    def complete_command(self, text, line, begidx, endidx):
        """docstring for complete_test"""
        return self.get_cmake_completions('command', text)
    
    do_c = do_command
    help_c = help_command
    complete_c = complete_command


    def do_module(self, arg):
        """docstring for do_test"""
        self.display_cmake_help('module', arg)

    def help_module(self):
        """docstring for help_test"""
        print
        print 'Print help for a single module'
        print

    def complete_module(self, text, line, begidx, endidx):
        """docstring for complete_test"""
        return self.get_cmake_completions('module', text)
    
    do_m = do_module
    help_m = help_module
    complete_m = complete_module




    def do_property(self, arg):
        """docstring for do_test"""
        self.display_cmake_help('property', arg)

    def help_property(self):
        """docstring for help_test"""
        print
        print 'Print help for a single property'
        print

    def complete_property(self, text, line, begidx, endidx):
        """docstring for complete_test"""
        return self.get_cmake_completions('property', text)
    
    do_p = do_property
    help_p = help_property
    complete_p = complete_property




    def do_variable(self, arg):
        """docstring for do_test"""
        self.display_cmake_help('variable', arg)

    def help_variable(self):
        """docstring for help_test"""
        print
        print 'Print help for a single variable'
        print

    def complete_variable(self, text, line, begidx, endidx):
        """docstring for complete_test"""
        return self.get_cmake_completions('variable', text)
    
    do_v = do_variable
    help_v = help_variable
    complete_v = complete_variable




    def do_quit(self, arg):
        """docstring for do_quit"""
        print
        sys.exit(1)

    do_EOF = do_quit

    def postloop(self):
        """docstring for postloop"""
        print

    def help_quit(self):
        """docstring for help_quit"""
        print 'Terminates CMake Help'

if __name__ == '__main__':
    try:
        cmh = CMakeHelp()
        cmh.cmdloop()
    except KeyboardInterrupt:
        print
